import { z } from "zod";
import { normalizeUnit, clampAmount } from "./food-normalize";
import { titleFromIngredients } from "./recipes-helpers";

// === —Ç–∏–ø—ã (—á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è TypeScript) ======================
export type IngredientItem = {
  name: string;
  amount: number;
  unit: string;
  note?: string;
};

export type StepItem = {
  order: number;
  action: string;
  detail: string;
  duration_min?: number;
  temperature_c?: number;
};

export type RecipeDto = {
  id: string;
  title: string;
  portion: string;
  time_min: number;
  equipment: string[];
  ingredients: IngredientItem[];
  steps: StepItem[];
  tips?: string[];
  nutrition?: {
    kcal: number;
    protein_g: number;
    fat_g: number;
    carb_g: number;
  };
};

export type RecipesResponse = { recipes: RecipeDto[] };

// === —Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –æ—Ç –º–æ–¥–µ–ª–∏ ======================
const IngredientSchema = z.object({
  name: z.string().min(1),
  amount: z.number().int().nonnegative(),
  unit: z.enum(["–≥", "–º–ª", "—Å—Ç. –ª.", "—á. –ª."]),
  note: z.string().optional(),
});

const StepSchema = z.object({
  order: z.number().int().positive(),
  action: z.string().min(1),
  detail: z.string().min(1),
  duration_min: z.number().int().positive().optional(),
  temperature_c: z.number().int().positive().optional(),
});

const RecipeSchema = z.object({
  id: z.string().min(1),
  title: z.string().min(1),
  portion: z.string().min(1),
  time_min: z.number().int().positive(),
  equipment: z.array(z.string().min(1)).min(1),
  ingredients: z.array(IngredientSchema).min(1),
  steps: z.array(StepSchema).min(3).max(8),
  tips: z.array(z.string()).optional(),
  nutrition: z
    .object({
      kcal: z.number().int().nonnegative(),
      protein_g: z.number().int().nonnegative(),
      fat_g: z.number().int().nonnegative(),
      carb_g: z.number().int().nonnegative(),
    })
    .optional(),
});

const ResponseSchema = z.object({
  recipes: z.array(RecipeSchema).min(1),
});

// === –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =========================================
export function sanitizeResponse(raw: unknown, allowed: Set<string>): RecipesResponse {
  console.log("üßº sanitizeResponse called with allowed:", [...allowed]);

  let parsed: RecipesResponse;
  try {
    parsed = ResponseSchema.parse(raw);
  } catch {
    parsed = { recipes: [] };
  }

  const clean: RecipeDto[] = [];

  for (const rec of parsed.recipes ?? []) {
    // --- 1) —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ allowed
    const filteredIngs = (rec.ingredients ?? []).filter((i) =>
      allowed.has(i.name.toLowerCase())
    );

    // --- 2) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const normIngs = filteredIngs
      .map((i) => {
        const unit = normalizeUnit(i.name, i.unit);
        const amount = clampAmount(i.name, i.amount);
        return { ...i, amount, unit };
      })
      .filter((i) => i.amount > 0);

    if (normIngs.length === 0) continue;

    // --- 3) –ø—Ä–æ–≤–µ—Ä—è–µ–º title
    const lowerTitle = rec.title.toLowerCase();
    const hasForeign = lowerTitle
      .split(/\s|,|\./)
      .some((w) => w && !allowed.has(w.replace(/[^\p{L}]/gu, "")));
    const title = hasForeign ? titleFromIngredients(normIngs) : rec.title;

    // --- 4) –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —à–∞–≥–∏
    let steps = (rec.steps ?? []).slice().sort((a, b) => a.order - b.order);
    if (steps.length < 3) steps = toFallbackSteps(normIngs);
    steps = steps.slice(0, 8);

    // --- 5) –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    const equipment =
      rec.equipment?.length > 0
        ? rec.equipment
        : ["–∫–∞—Å—Ç—Ä—é–ª—è 3 –ª", "—Å–∫–æ–≤–æ—Ä–æ–¥–∞", "–Ω–æ–∂", "–¥–æ—Å–∫–∞", "–¥—É—Ä—à–ª–∞–≥"];

    // --- 6) –≤—Ä–µ–º—è
    let time_min = rec.time_min;
    if (!Number.isFinite(time_min) || time_min <= 0) {
      const sum = steps.reduce((acc, s) => acc + (s.duration_min ?? 0), 0);
      time_min = sum || 25;
    }

    // --- 7) –ø–æ—Ä—Ü–∏–∏
    const portion = rec.portion?.trim() || "2 –ø–æ—Ä—Ü–∏–∏";

    clean.push({
      id: rec.id || cryptoRandomId(),
      title,
      portion,
      time_min: Math.round(time_min),
      equipment,
      ingredients: normIngs,
      steps,
      tips: rec.tips?.slice(0, 3),
      nutrition: rec.nutrition,
    });
  }

  // fallback –µ—Å–ª–∏ –≤—Å—ë –ø—É—Å—Ç–æ
  if (clean.length === 0) clean.push(fallbackFromAllowed(allowed));

  return { recipes: clean };
}

// === –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==================================
function cryptoRandomId() {
  return Math.random().toString(36).slice(2, 10);
}

function fallbackFromAllowed(allowed: Set<string>): RecipeDto {
  const ing = [
    allowed.has("–ø–∞—Å—Ç–∞") && { name: "–ø–∞—Å—Ç–∞", amount: 180, unit: "–≥" },
    allowed.has("–∫–æ–ª–±–∞—Å–∞") && { name: "–∫–æ–ª–±–∞—Å–∞", amount: 120, unit: "–≥" },
    { name: "–≤–æ–¥–∞", amount: 2000, unit: "–º–ª", note: "–¥–ª—è –≤–∞—Ä–∫–∏" },
    { name: "—Å–æ–ª—å", amount: 1, unit: "—Å—Ç. –ª." },
    { name: "–º–∞—Å–ª–æ", amount: 1, unit: "—Å—Ç. –ª." },
  ].filter(Boolean) as IngredientItem[];

  return {
    id: cryptoRandomId(),
    title: "–ü—Ä–æ—Å—Ç–æ–µ –±–ª—é–¥–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
    portion: "2 –ø–æ—Ä—Ü–∏–∏",
    time_min: 25,
    equipment: ["–∫–∞—Å—Ç—Ä—é–ª—è 3 –ª", "—Å–∫–æ–≤–æ—Ä–æ–¥–∞", "–Ω–æ–∂", "–¥–æ—Å–∫–∞", "–¥—É—Ä—à–ª–∞–≥"],
    ingredients: ing,
    steps: toFallbackSteps(ing),
    tips: ["–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –≤–æ–¥—ã –æ—Ç –ø–∞—Å—Ç—ã –¥–ª—è —Å–æ—á–Ω–æ—Å—Ç–∏."],
  };
}

function toFallbackSteps(ingredients: { name: string }[]) {
  const hasPasta = ingredients.some((i) => i.name === "–ø–∞—Å—Ç–∞");
  const hasKolbasa = ingredients.some((i) => i.name === "–∫–æ–ª–±–∞—Å–∞");
  return [
    {
      order: 1,
      action: "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≤–æ–¥—É",
      detail: "–í –∫–∞—Å—Ç—Ä—é–ª—é 2 –ª –≤–æ–¥—ã, 1 —Å—Ç. –ª. —Å–æ–ª–∏. –î–æ–≤–µ–¥–∏—Ç–µ –¥–æ –∫–∏–ø–µ–Ω–∏—è.",
      duration_min: 10,
      temperature_c: 100,
    },
    hasPasta
      ? {
          order: 2,
          action: "–û—Ç–≤–∞—Ä–∏—Ç–µ –ø–∞—Å—Ç—É",
          detail:
            "8‚Äì10 –º–∏–Ω—É—Ç –¥–æ –∞–ª—å –¥–µ–Ω—Ç–µ, –ø–æ–º–µ—à–∏–≤–∞–π—Ç–µ. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ 50 –º–ª –≤–æ–¥—ã.",
          duration_min: 10,
        }
      : {
          order: 2,
          action: "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
          detail: "–ù–∞—Ä–µ–∂—å—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥—É.",
          duration_min: 5,
        },
    hasKolbasa
      ? {
          order: 3,
          action: "–û–±–∂–∞—Ä—å—Ç–µ –∫–æ–ª–±–∞—Å—É",
          detail: "–ù–∞ —Å—É—Ö–æ–π —Å–∫–æ–≤–æ—Ä–æ–¥–µ 3‚Äì4 –º–∏–Ω—É—Ç—ã, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—à–∏–≤–∞—è.",
          duration_min: 4,
        }
      : {
          order: 3,
          action: "–°–æ–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ",
          detail: "–°–º–µ—à–∞–π—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ–π—Ç–µ 2‚Äì3 –º–∏–Ω—É—Ç—ã.",
          duration_min: 3,
        },
  ].filter(Boolean) as StepItem[];
}

export default sanitizeResponse; // ‚úÖ —á—Ç–æ–±—ã import —Ä–∞–±–æ—Ç–∞–ª –∏ —Å default, –∏ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º
