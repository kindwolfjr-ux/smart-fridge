// src/components/recipe-card.tsx
"use client";
import { useMemo, useState } from "react";
import type { RecipeDto, IngredientDto, StepDto } from "@/types/recipe";

export default function RecipeCard({ recipe }: { recipe: RecipeDto & { lead?: string } }) {
  const [open, setOpen] = useState(false);

  const isFast = typeof recipe.time_min === "number" && recipe.time_min <= 10;

  const usedProducts = useMemo(() => {
    const uniq = Array.from(
      new Set(
        (recipe.ingredients ?? [])
          .map((i) => (i?.name || "").trim())
          .filter(Boolean)
      )
    );
    return uniq.slice(0, 6); // –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
  }, [recipe.ingredients]);

  const copyRecipe = () => {
    const text = [
      `${recipe.title} (${recipe.portion ?? "1 –ø–æ—Ä—Ü–∏—è"}, ~${recipe.time_min ?? 15} –º–∏–Ω)\n`,
      "üßæ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:",
      ...recipe.ingredients.map(
        (i: IngredientDto) =>
          `- ${i.name} ‚Äî ${i.amount ?? ""} ${i.unit ?? ""}${i.note ? ` (${i.note})` : ""}`
      ),
      "\nüß≠ –®–∞–≥–∏:",
      ...recipe.steps.map(
        (s: StepDto) =>
          `${s.order}. ${s.action}: ${s.detail ?? ""}${
            s.duration_min ? ` (~${s.duration_min} –º–∏–Ω)` : ""
          }`
      ),
    ].join("\n");

    navigator.clipboard?.writeText(text).catch(() => {});
  };

  return (
    <div className="p-4 rounded-2xl shadow bg-white space-y-2">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –≤—Ä–µ–º—è/–ø–æ—Ä—Ü–∏–∏ + –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ */}
      <div className="flex justify-between items-start gap-3">
        <div className="min-w-0">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <span className="truncate">{recipe.title}</span>

            {/* –ë–µ–π–¥–∂ "–±—ã—Å—Ç—Ä–æ" –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ ‚â§ 10 –º–∏–Ω */}
            {isFast && (
              <span
                className="inline-flex items-center rounded-full border border-green-500 text-green-600 px-2 py-0.5 text-xs whitespace-nowrap"
                title="–ë—ã—Å—Ç—Ä—ã–π —Ä–µ—Ü–µ–ø—Ç (‚â§ 10 –º–∏–Ω)"
              >
                ‚â§ 10 –º–∏–Ω
              </span>
            )}
          </h3>

          <div className="text-sm text-gray-500 mt-1">
            ‚è± ~{recipe.time_min ?? 15} –º–∏–Ω ‚Ä¢ {recipe.portion ?? "1 –ø–æ—Ä—Ü–∏—è"}
          </div>
        </div>

        <button
          onClick={copyRecipe}
          className="text-sm text-blue-600 hover:underline shrink-0"
          title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"
          aria-label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç"
        >
          üìã
        </button>
      </div>

      {/* lead ‚Äî –≤–≤–æ–¥–Ω—ã–π –∞–±–∑–∞—Ü */}
      {"lead" in recipe && recipe.lead && (
        <p className="text-sm text-muted-foreground">{recipe.lead}</p>
      )}

      {/* –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
      {usedProducts.length > 0 && (
        <p className="text-sm text-gray-600">
          <span className="font-medium">–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:</span>{" "}
          {usedProducts.join(", ")}
        </p>
      )}

      {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
      <div className="mt-1">
        <p className="font-medium">–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</p>
        <ul className="list-disc list-inside text-sm text-gray-700">
          {recipe.ingredients.map((i: IngredientDto, idx) => (
            <li key={idx}>
              {i.name}
              {i.amount && ` ‚Äî ${i.amount}`}
              {i.unit && ` ${i.unit}`}
              {i.note && ` (${i.note})`}
            </li>
          ))}
        </ul>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —à–∞–≥–æ–≤ */}
      <button
        onClick={() => setOpen(!open)}
        className="mt-3 bg-gray-900 text-white text-sm px-3 py-1.5 rounded-md"
      >
        {open ? "–°–∫—Ä—ã—Ç—å —à–∞–≥–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥–∏"}
      </button>

      {/* –®–∞–≥–∏ */}
      {open && (
        <ol className="list-decimal list-inside text-sm space-y-1 mt-2">
          {recipe.steps.map((s: StepDto) => (
            <li key={s.order}>
              <strong>{s.action}</strong>
              {s.detail && ` ‚Äî ${s.detail}`}
              {s.duration_min && (
                <span className="text-gray-500"> (~{s.duration_min} –º–∏–Ω)</span>
              )}
            </li>
          ))}
        </ol>
      )}
    </div>
  );
}
