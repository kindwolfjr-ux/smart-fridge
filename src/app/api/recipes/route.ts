// src/app/api/recipes/route.ts
export const dynamic = 'force-dynamic';
export const revalidate = 0;
export const runtime = 'nodejs';

type Recipe = {
  title: string;
  ingredients: string[];
  steps: string[];
};

function normalizeProducts(input: unknown): string[] {
  if (!Array.isArray(input)) return [];
  const cleaned = input
    .map((x) => (typeof x === 'string' ? x : String(x ?? '')))
    .map((s) => s.trim().toLowerCase())
    .filter(Boolean);
  return Array.from(new Set(cleaned)).sort();
}

function sampleRecipes(products: string[]): Recipe[] {
  if (products.length === 0) {
    return [{
      title: '–ù–µ—á–µ–≥–æ –≥–æ—Ç–æ–≤–∏—Ç—å ü§∑‚Äç‚ôÇÔ∏è',
      ingredients: [],
      steps: ['–ü–µ—Ä–µ–¥–∞–π –≤ –∑–∞–ø—Ä–æ—Å–µ products: string[]']
    }];
  }

  // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: –¥–µ–ª–∞–µ–º 1‚Äì2 —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const titleBase = products.slice(0, 3).join(', ');
  return [
    {
      title: `–°–∫–æ–≤–æ—Ä–æ–¥–∫–∞: ${titleBase}`,
      ingredients: [...products, '—Å–æ–ª—å', '–º–∞—Å–ª–æ'],
      steps: [
        '–ù–∞—Ä–µ–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã',
        '–†–∞–∑–æ–≥—Ä–µ—Ç—å —Å–∫–æ–≤–æ—Ä–æ–¥—É 2‚Äì3 –º–∏–Ω—É—Ç—ã',
        '–û–±–∂–∞—Ä–∏—Ç—å 5‚Äì7 –º–∏–Ω—É—Ç, –ø–æ–º–µ—à–∏–≤–∞—è',
        '–ü–æ—Å–æ–ª–∏—Ç—å, –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
      ]
    },
    {
      title: `–°–∞–ª–∞—Ç: ${titleBase}`,
      ingredients: [...products, '–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', '—â–µ–ø–æ—Ç–∫–∞ —Å–æ–ª–∏'],
      steps: [
        '–ü–æ—Ä–µ–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∫—É–±–∏–∫–æ–º',
        '–°–º–µ—à–∞—Ç—å –≤ –º–∏—Å–∫–µ',
        '–ó–∞–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å–ª–æ–º –∏ –ø–æ—Å–æ–ª–∏—Ç—å',
        '–ü–æ–¥–∞—Ç—å —Å—Ä–∞–∑—É'
      ]
    }
  ];
}

export async function GET() {
  return new Response(
    JSON.stringify({ ok: true, note: '–ò—Å–ø–æ–ª—å–∑—É–π POST —Å { products: string[] }' }),
    {
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Cache-Control': 'no-store'
      }
    }
  );
}


export async function POST(req: Request) {
  // –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ—Ä–ø–∏–º–æ –∫ —Ñ–æ—Ä–º–∞—Ç—É
  let body: any = {};
  try {
    // –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ-JSON ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º
    body = await req.json();
  } catch (_) {
    // noop
  }

  const products = normalizeProducts(body?.products);
  const recipes = sampleRecipes(products);

  return Response.json(
    {
      ok: true,
      products,
      recipes,
      trace: {
        ts: new Date().toISOString(),
        router: 'app',
        env: {
          vercel: !!process.env.VERCEL
        }
      }
    },
    { headers: { 'Cache-Control': 'no-store' } }
  );
}
