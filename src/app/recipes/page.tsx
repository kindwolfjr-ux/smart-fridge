"use client";

import { useSearchParams } from "next/navigation";
import { useEffect, useMemo, useState } from "react";
import RecipeCard from "@/components/recipe-card";
import type { RecipesResponse } from "@/types/recipe";

export default function RecipesPage() {
  const searchParams = useSearchParams(); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è query –≤ Next.js 15
  const [data, setData] = useState<RecipesResponse | null>(null);
  const [loading, setLoading] = useState(true);

  // --- —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ URL ---
  const urlItems = useMemo(() => {
    const s = searchParams.get("items") ?? "";
    return s
      ? s
          .split(",")
          .map((x) => x.trim().toLowerCase())
          .filter(Boolean)
          .sort()
      : [];
  }, [searchParams]);

  // --- –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ / –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ---
  useEffect(() => {
    const payloadRaw =
      typeof window !== "undefined"
        ? sessionStorage.getItem("recipes_payload")
        : null;

    let shouldFetch = true;

    if (payloadRaw) {
      try {
        const payload = JSON.parse(payloadRaw);
        const storedItems = Array.isArray(payload?.products)
          ? payload.products
              .map((x: string) => x.trim().toLowerCase())
              .filter(Boolean)
              .sort()
          : [];

        // üîç –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –±–µ—Ä—ë–º –∏–∑ sessionStorage
        if (JSON.stringify(storedItems) === JSON.stringify(urlItems)) {
          setData(payload.data);
          setLoading(false);
          shouldFetch = false;
        }
      } catch {
        // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
      }
    }

    // üöÄ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–æ–π ‚Äî –≥—Ä—É–∑–∏–º –∑–∞–Ω–æ–≤–æ
    (async () => {
      if (!shouldFetch) return;
      setLoading(true);

      const res = await fetch("/api/recipes", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ products: urlItems }),
      });

      const json = await res.json();
      setData(json);

      // –∫—ç—à–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ "–ù–∞–∑–∞–¥"
      sessionStorage.setItem(
        "recipes_payload",
        JSON.stringify({ products: urlItems, data: json })
      );

      setLoading(false);
    })();
  }, [urlItems.join(",")]);

  // --- –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
  if (loading)
    return <div className="p-6 text-gray-500">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã...</div>;

  if (!data)
    return (
      <div className="p-6 text-gray-500">
        –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
      </div>
    );

  return (
    <main className="p-6 space-y-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-semibold mb-4">–í–∞—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã</h1>

      {data.recipes.map((r) => (
        <RecipeCard key={r.id} recipe={r} />
      ))}
    </main>
  );
}
